using System;
using System.Collections.Generic;
using System.Text;

namespace SnippetExecutor
{
    interface ISnippetCompiler
    {
        IO writer
        {
            set;
        }

        Options options { set; get; }

        /// <summary>
        /// Processes snippet text and returns a string which should
        /// be directly compileable, i.e. if written to a file then executing
        /// the compiler on that file should succeed.
        /// </summary>
        /// <param name="snippetText">the snippet to prepare</param>
        /// <returns>valid source code as a string</returns>
        string PrepareSnippet(String snippetText);

        /// <summary>
        /// Compiles valid source code into an executable.  A reference to the executable
        /// should be returned for later handing to execute.
        /// </summary>
        /// <param name="text">Valid source code, generated by ProcessSnippet</param>
        /// <param name="options">compiler command line options</param>
        /// <returns>an object handle referencing the compiled code</returns>
        Object Compile(String text, string options);

        /// <summary>
        /// Executes the executable created by Compile, hooking stdin and stdout to
        /// the IO object injected in the property.
        /// </summary>
        /// <param name="args">command line arguments for the execution</param>
        /// <returns>true if execution finished without error</returns>
        bool execute(Object executable, string args);

        bool cleanup(SnippetInfo info);
    }

    interface IO
    {
        void write(String s);

        void writeLine();

        void writeLine(String s);

        int read();

        int readLine();
    }

    [Flags]
    enum Options
    {
        none = 1 << 0,
        VerboseCompile = 1 << 1,
        Timings = 1 << 2,

    }

}
